#/usr/bin/env python
# @author Stefano Borini
# @license Artistic License 2.0

import getopt
import os
import sys

def _usage():
    print "Usage : "+os.path.basename(sys.argv[0])
    print ""
    print "Computes the linear response excitation energy with the cam b3lyp functional"
    print "--roots=1,2,3,4 : specifies the roots for each symmetry"
    print ""


roots=[]

opts, args=getopt.getopt(sys.argv[1:], "hr:", ["help", "roots="])

for opt in opts:
    print opt
    if opt[0] == "-h" or opt[0] == "--help":
        _usage()
        sys.exit(1)
    if opt[0] == "-r" or opt[0] == "--roots":
        roots.extend(map(int, opt[1].split(",")))

if len(args) < 1:
    _usage()
    sys.exit(1)

if len(roots) == 0:
    _usage()
    sys.exit(1)


dalton_mol_filename = args[0]

f = file(os.path.join(os.getcwd(),"run.dal"),"w")
f.write("""# this file autogenerated by linearResponseExcitationCAMB3LYP20090903.py
**DALTON
.RUN RESPONSE
.DIRECT
**INTEGRALS
.NOSUP
*END OF HERMIT
**WAVE FUNCTIONS
.DFT
CAMB3LYP
*SCF INP
.MAX DIIS ITERATIONS
 100
**RESPONSE
*LINEAR
.SINGLE RESIDUE
.DIPLEN
.ROOTS
""")

f.write(" ".join(map(str, roots)))
f.write("\n")
f.write("**END OF DALTON INPUT\n")

f.close()

sys.exit(os.system("cnrun dalton-2 run "+os.path.splitext(dalton_mol_filename)[0]))
