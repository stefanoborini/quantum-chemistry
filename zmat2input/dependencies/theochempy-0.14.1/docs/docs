Here are some documentation for daltonoutput class object.
Create a DaltonOutput class instance by doing

>>> import daltonoutput
>>> d=daltonoutput.DaltonOutput('formaldeide.out')

There are various objects that this class provides:

Molecule
Geometry
Atom
NormalMode
Position

The main object is Molecule. It holds the other objects in an ordered
list.
Once the file is parsed, its data can be accessed taking the Molecule object
by issuing

>>> m=d.molecule()
>>> m
<daltonoutput.Molecule instance at 0x81c8694>

m has a collection of data gathered from the file. the dir command show us some useful
information

>>> dir(m)
['__doc__', '__init__', '__module__', '__str__', 'atomList', 'geometryList', 'lastGeometry', 'normalModeList', 'numOfAtomTypes', 'numOfAtoms']

the __str__ method gives a useful debug function. issuing

>>> print m

the available data are printed in a human readable form.
the Molecule object has the method lastGeometry() that returns the final optimized geometry (a Geometry object)
and some properties: numOfAtoms and numOfAtomTypes contain the total number of atoms and the types of atoms in
our output. atomList is a list of Atom objects. geometryList is a list of Geometry objects and normalModeList is
a list of NormalMode objects.

The Atom object contain data for a single atom

>>> print m.atomList[0]
Atom
symbol: O1
charge: 8
mass:   15.994915
prim:   61
contr:  18
basis:  [14s9p4d|4s3p1d]

>>> dir (m.atomList[0])
['__doc__', '__init__', '__module__', '__str__', 'basis', 'charge', 'contracted', 'mass', 'primitives', 'symbol']

The dir access gives us the available properties that are also printed by the string access. Obviously
the list contain an entry for each atom in our molecule.

The Geometry objects come from the geometryList list.

>>> print m.geometryList[0]
Geometry
(0.000000,0.000000,0.300000)
(0.000000,-1.759710,3.377596)
(0.000000,1.759710,3.377596)
(0.000000,0.000000,2.305192)
energy: -113.932636

The list gives the optimization steps required to go from the initial geometry to the optimized
geometry. the first element is the starting geometry. The last element of the list is the optimized
geometry.

>>> dir(m.geometryList[0])
['__doc__', '__init__', '__module__', '__str__', 'energy', 'posList']

The Geometry object exports two properties: energy, that is, the energy at that geometry,
and posList, which is a list of Position objects, where the xyz position for a given atom is
contained. The Position object is nothing more than a simulated tuple, with the most useful
properties x,y,z


>>> print m.geometryList[0].posList[0]
(0.000000,0.000000,0.300000)

>>> m.geometryList[0].posList[0].x
0.0
>>> m.geometryList[0].posList[0].y
0.0
>>> m.geometryList[0].posList[0].z
0.29999999999999999
>>>

please note that the order is the same as given by the atom section, so atom at atomList[0]
also has its position in posList[0]

Finally, the NormalMode objects, held in Molecule.normalModeList. Please note that for precision
issues, these data are filled only if the output from dalton has the vibana print threshold set to
10 (enabling a more verbose printout). To achieve this, specify

*VIBANA
.PRINT
10

in the **FINAL or **PROPERTIES section

>>> print m.normalModeList[0]
Normal Coordinate
frequency:  -0.000000
normal coords: [0.0, 0.0, 0.0, 0.0084930500000000003, 0.0, 0.0, 0.0084930500000000003, 0.0, 0.0, 0.0057964599999999998, 0.0, 0.0]
>>> dir(m.normalModeList[11])
['__doc__', '__init__', '__module__', '__str__', 'coordinates', 'frequency']
>>> print m.normalModeList[11]
Normal Coordinate
frequency:  0.014746
normal coords: [0.0, 1.8199999999999999e-06, 0.0, 0.0, 0.01330254, -0.0080879100000000002, 0.0, 0.01330254, 0.0080879100000000002, 0.0, -0.0022368599999999998, 0.0]

also, please note that the order is by eigenvalue, so for this reason translation and rotation normal modes
are the firsts. The frequency is given as the square root of the absolute value reported from dalton (hartree).
If some frequency is imaginary, the value is reported as negative.

